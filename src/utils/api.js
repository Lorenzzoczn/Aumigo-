// Utilit√°rio para fazer requisi√ß√µes √† API de forma robusta

export const apiRequest = async (url, options = {}) => {
  try {
    console.log('üåê Fazendo requisi√ß√£o para:', url, options);
    
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });

    console.log('üì° Resposta recebida:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    });

    // Verificar se a resposta √© v√°lida
    if (!response.ok) {
      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
      try {
        const errorText = await response.text();
        if (errorText) {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.message || errorMessage;
        }
      } catch (e) {
        // Ignorar erro de parse do erro
      }
      throw new Error(errorMessage);
    }

    // Tentar fazer parse direto do JSON
    try {
      const data = await response.json();
      console.log('‚úÖ JSON parseado com sucesso:', data);
      return data;
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      
      // Tentar obter o texto para debug
      try {
        const text = await response.text();
        console.error('üìÑ Conte√∫do da resposta:', text);
      } catch (textError) {
        console.error('‚ùå N√£o foi poss√≠vel obter o texto da resposta');
      }
      
      throw new Error('Resposta do servidor n√£o √© um JSON v√°lido');
    }

  } catch (error) {
    console.error('‚ùå Erro na requisi√ß√£o:', error);
    throw error;
  }
};

export default apiRequest;